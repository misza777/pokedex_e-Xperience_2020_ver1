{"version":3,"sources":["services/pokemon.js","components/Navbar/index.js","components/Navbar/Navbar.js","components/SimplePagination/index.js","components/SimplePagination/SimplePagination.js","components/AdvancedPagination/index.js","components/AdvancedPagination/AdvancedPagination.js","components/SearchGenderForm/index.js","components/SearchGenderForm/SearchGenderForm.js","helpers/pokemonColorTypes.js","components/Card/Card.js","components/PokemonContent/index.js","components/PokemonContent/PokemonContent.js","App.js","serviceWorker.js","index.js"],"names":["getAllPokemon","url","a","Promise","resolve","reject","fetch","then","res","json","data","emptyJson","abilities","ability","name","id","sprites","back_default","back_shiny","front_default","front_shiny","types","type","height","weight","getSinglePokemon","response","ok","Navbar","className","src","alt","SimplePagination","props","prev","next","onClick","AdvancedPagination","pokemonPerPage","totalPokemons","paginate","pageNumbers","i","Math","ceil","push","map","number","key","SearchForm","handleSearch","useState","gender","setGender","action","onSubmit","e","preventDefault","htmlFor","placeholder","value","onChange","target","typeColors","bug","dragon","fairy","fire","ghost","ground","normal","pyschic","steel","dark","electric","fighting","flying","grass","ice","poison","rock","water","Card","active","setActive","pokemon","pokemonFrontFoto","pokemonBackFoto","pokemonBackShinyFoto","typeArr","style","backgroundColor","pokemonColorTypes","PokemonContent","pokemonData","loading","App","setPokemonData","nextUrl","setNextUrl","prevUrl","setPrevUrl","setLoading","searching","setSearching","currentPage","setCurrentPage","setTotalPokemons","initialUrl","useEffect","previous","loadingSinglePokemon","results","fetchData","pokemonGenderArray","pokemon_species_details","pokemonName","pokemon_species","length","chunked_arr","chunk","console","log","currentPokemonArr","loadingSearchedPokemon","all","pokemonRecord","_pokemonData","array","size","index","slice","pageNumber","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ecc6e683.chunk.js","sourcesContent":["export async function getAllPokemon(url) {\r\n  return new Promise((resolve, reject) => {\r\n    fetch(url)\r\n      .then((res) => res.json())\r\n      .then((data) => resolve(data));\r\n  });\r\n}\r\n\r\n// export async function getSinglePokemon(url) {\r\n//   return new Promise((resolve, reject) => {\r\n//     fetch(url)\r\n//     .then((res) => res.json())\r\n//     .then((data) => resolve(data))\r\n\r\n//   });\r\n// }\r\n\r\nconst emptyJson =\r\n  //empty Json file\r\n  {\r\n    abilities: [\r\n      {\r\n        ability: {\r\n          name: \"no ability\",\r\n        },\r\n      },\r\n    ],\r\n    id: 1,\r\n    name: \"Sorry! No Pokemon in Database\",\r\n    sprites: {\r\n      back_default: \"\",\r\n      back_shiny: \"\",\r\n      front_default: \"\",\r\n      front_shiny: \"\",\r\n    },\r\n    types: [\r\n      {\r\n        type: {\r\n          name: \"no types\",\r\n        },\r\n      },\r\n    ],\r\n    height: \"none\",\r\n    weight: \"none\",\r\n  };\r\n\r\nexport async function getSinglePokemon(url) {\r\n  return new Promise((resolve, reject) => {\r\n    fetch(url)\r\n      .then((response) => {\r\n        if (response.ok) {\r\n          return response.json();\r\n        }\r\n        return emptyJson;\r\n        // throw new Error(response.statusText);)\r\n      })\r\n      .then((data) => resolve(data));\r\n  });\r\n}\r\n","import Navbar from \"./Navbar\";\r\n\r\nexport default Navbar;\r\n","import React from \"react\";\r\nimport \"./Navbar.css\";\r\n\r\nconst Navbar = () => {\r\n  return (\r\n   <div className=\"Navbar\">\r\n     <img src=\"pikaPokemon.png\" alt=\"pokemon_logo\"/>\r\n     <div>Pokemon API</div>\r\n   </div>    \r\n  )};\r\n\r\nexport default Navbar;\r\n","import SimplePagination from \"./SimplePagination\";\r\n\r\nexport default SimplePagination;\r\n","import React from \"react\";\r\n\r\nconst SimplePagination = (props) => {\r\n  const { prev, next } = props;\r\n  return (\r\n    <div className=\"btn\">\r\n      <button onClick={() => prev()}>Prev</button>\r\n      <button onClick={next}>Next</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SimplePagination;\r\n","import AdvancedPagination from \"./AdvancedPagination\";\r\n\r\nexport default AdvancedPagination;\r\n","import React from \"react\";\r\n\r\nconst AdvancedPagination = ({ pokemonPerPage, totalPokemons, paginate }) => {\r\n  const pageNumbers = [];\r\n  for (let i = 1; i <= Math.ceil(totalPokemons / pokemonPerPage); i++) {\r\n    pageNumbers.push(i);\r\n  }\r\n\r\n  return (\r\n    <nav>\r\n      <ul className=\"btn pagination\">\r\n        {pageNumbers.map((number) => (\r\n          <li key={number}>\r\n            <button onClick={() => paginate(number)}>{number}</button>\r\n            {number}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default AdvancedPagination;\r\n","import SearchForm from \"./SearchGenderForm\";\r\n\r\nexport default SearchForm;","import React, { useState } from \"react\";\r\n\r\nconst SearchGenderForm = ({ handleSearch }) => {\r\n  // hook idzie do komponentu!!!\r\n  const [gender, setGender] = useState(\"1\");\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    handleSearch(gender);\r\n  };\r\n\r\n  return (\r\n    <div className=\"search btn\">\r\n      <form action=\"\" onSubmit={handleSubmit}>\r\n        <label htmlFor=\"gender\">\r\n          <select\r\n            name=\"gender\"\r\n            id=\"gender\"\r\n            placeholder=\"Gender\"\r\n            value={gender}\r\n            onChange={(e) => setGender(e.target.value)}\r\n          >\r\n            <option value=\"1\">Female</option>\r\n            <option value=\"2\">Male</option>\r\n            <option value=\"3\">Genderless</option>\r\n          </select>\r\n          <button type=\"submit\">Choose Gender</button>\r\n        </label>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchGenderForm;\r\n","const typeColors = {\r\n  bug: \"#729f3f\",\r\n  dragon: \"#53a4cf\",\r\n  fairy: \"#fdb9e9\",\r\n  fire: \"#fd7d24\",\r\n  ghost: \"#7b62a3\",\r\n  ground: \"#f7de3f\",\r\n  normal: \"#a4acaf\",\r\n  pyschic: \"#f366b9\",\r\n  steel: \"#9eb7b\",\r\n  dark: \"#707070\",\r\n  electric: \"#eed535\",\r\n  fighting: \"#d56723\",\r\n  flying: \"#3dc7ef\",\r\n  grass: \"#9bcc50\",\r\n  ice: \"#51c4e7\",\r\n  poison: \"#b97fc9\",\r\n  rock: \"#a38c21\",\r\n  water: \"#4592c4\",\r\n};\r\n\r\nexport default typeColors;\r\n","import React, { useState } from \"react\";\r\nimport \"./Card.css\";\r\n// import kolorow wlasciwosci\r\nimport pokemonColorTypes from \"../../helpers/pokemonColorTypes\";\r\n\r\nconst Card = (props) => {\r\n  // mozesz tez napisac zamiast props {pokemon}\r\n  const [active, setActive] = useState(false);\r\n\r\n  const { pokemon } = props;\r\n  // jak mamyobiekt to jest prosciej jak tablice to iterujemy lub przekazujemy indexy\r\n  const pokemonFrontFoto = pokemon.sprites.front_default;\r\n  const pokemonBackFoto = pokemon.sprites.back_default;\r\n  const pokemonBackShinyFoto = pokemon.sprites.back_shiny;\r\n\r\n  const showElement = () => {\r\n    setActive(!active);\r\n  };\r\n\r\n  return (\r\n    <div className=\"Card\">\r\n      {pokemonFrontFoto ? (\r\n        <div className=\"Card__img\">\r\n          <div className=\"Card__img--normal\">\r\n            <img\r\n              src={pokemon.sprites.front_default}\r\n              alt=\"pokemon_front_image\"\r\n            />\r\n            {pokemonBackFoto ? (\r\n              <img\r\n                src={pokemon.sprites.back_default}\r\n                alt=\"pokemon_back_image\"\r\n              />\r\n            ) : null}\r\n          </div>\r\n          <button className=\"showBtn\" onClick={showElement}>\r\n            {active ? \"hide shiny version\" : \"show shiny version\"}\r\n          </button>\r\n          {active ? (\r\n            <div className=\"Card__img--shiny\">\r\n              <img\r\n                src={pokemon.sprites.front_shiny}\r\n                alt=\"pokemon_front__shiny_image\"\r\n              />\r\n              {pokemonBackShinyFoto ? (\r\n                <img\r\n                  src={pokemon.sprites.back_shiny}\r\n                  alt=\"pokemon_back_shiny_image\"\r\n                />\r\n              ) : null}\r\n            </div>\r\n          ) : null}\r\n        </div>\r\n      ) : (\r\n        <div className=\"Card__img\">\r\n          <img className=\"nologo\" src={\"/nodata.png\"} alt=\"nodata_image\" />\r\n        </div>\r\n      )}\r\n      {/* nazwa i typy */}\r\n      <div className=\"Card__name\">{pokemon.name}</div>\r\n      <p className=\"Card__type__title\">Type:</p>\r\n      <div className=\"Card__types\">\r\n        {pokemon.types.map((typeArr, i) => {\r\n          return (\r\n            <div\r\n              className=\"Card__type\"\r\n              key={i}\r\n              style={{\r\n                backgroundColor: pokemonColorTypes[typeArr.type.name],\r\n              }}\r\n            >\r\n              {typeArr.type.name}\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n      {/* pozostale info */}\r\n      <div className=\"Card__info\">\r\n        <div className=\"Card__data\">\r\n          <p className=\"title\">Weight</p>\r\n          <p className=\"Card__data--value\">{pokemon.weight}</p>\r\n        </div>\r\n      </div>\r\n      <div className=\"Card__info\">\r\n        <div className=\"Card__data\">\r\n          <p className=\"title\">Height</p>\r\n          <p className=\"Card__data--value\">{pokemon.height}</p>\r\n        </div>\r\n      </div>\r\n      <div className=\"Card__info\">\r\n        <div className=\"Card__data\">\r\n          <p className=\"title\">Ability</p>\r\n          {pokemon.abilities.map((ability, i) => {\r\n            return (\r\n              <p className=\"Card__type--ability\" key={i}>\r\n                {ability.ability.name}\r\n              </p>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n      {/* // inna wersja   */}\r\n      {/* // return pokemon.abilities[0].ability.name  */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import PokemonContent from \"./PokemonContent\";\r\n\r\nexport default PokemonContent;\r\n","import React from \"react\";\r\nimport Card from \"../Card/Card\";\r\n\r\nconst PokemonContent = ({ pokemonData, loading }) => {\r\n  return (\r\n    <>\r\n    {loading ? (\r\n      <h1>Loading...</h1>\r\n    ) : (\r\n    <div className=\"grid-container\">\r\n      {pokemonData.map((pokemon, i) => {\r\n        return <Card key={i} pokemon={pokemon} />;\r\n      })}\r\n    </div>\r\n    )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PokemonContent;\r\n","import React, { useState, useEffect } from \"react\";\n// import logo from \"./logo.svg\";\nimport { getAllPokemon, getSinglePokemon } from \"./services/pokemon\";\nimport Navbar from \"./components/Navbar\";\nimport SimplePagination from \"./components/SimplePagination\";\nimport AdvancedPagination from \"./components/AdvancedPagination\";\nimport SearchGenderForm from \"./components/SearchGenderForm\";\nimport PokemonContent from \"./components/PokemonContent\";\nimport \"./App.css\";\n\nfunction App() {\n  // hooks\n  const [pokemonData, setPokemonData] = useState([]);\n  const [nextUrl, setNextUrl] = useState(\"\");\n  const [prevUrl, setPrevUrl] = useState(\"\");\n  const [loading, setLoading] = useState(true);\n  const [searching, setSearching] = useState(false);\n  //pagination\n  const [currentPage, setCurrentPage] = useState(1);\n  const [pokemonPerPage] = useState(20);\n  const [totalPokemons, setTotalPokemons] = useState(0);\n  // const [indexOfFirstPokemon, setIndexOfFirstPokemon] = useState(0);\n  const [gender, setGender] = useState(0);\n\n  const initialUrl = \"https://pokeapi.co/api/v2/pokemon\";\n\n  // zachowuje sie jak componentdidmount, jak sie zamontuje component to wtedy uruchamiamy useEffect i  fetch data from url\n  useEffect(() => {\n    setSearching(false);\n    async function fetchData() {\n      let response = await getAllPokemon(initialUrl);\n      // console.log(response);\n      setNextUrl(response.next);\n      setPrevUrl(response.previous);\n      await loadingSinglePokemon(response.results);\n      setLoading(false);\n    }\n    fetchData();\n  }, []);\n  // [] clean it up only once (on mount and unmount), unikamy zapetlenia renderu never ending loop, uruchamia sie tylko raz\n\n  //paginacja podstawowa i wywolanie fetcha nastepnej storny\n  const next = async () => {\n    setLoading(true);\n    setSearching(false);\n    let data = await getAllPokemon(nextUrl);\n    // console.log(nextUrl);\n    await loadingSinglePokemon(data.results);\n    setNextUrl(data.next);\n    // console.log(data.next);\n    setPrevUrl(data.previous);\n    setLoading(false);\n  };\n\n  //paginacja i wywolanie fetcha poprzedniej strony\n  const prev = async () => {\n    if (!prevUrl) return;\n    setLoading(true);\n    setSearching(false);\n    let data = await getAllPokemon(prevUrl);\n    await loadingSinglePokemon(data.results);\n    setNextUrl(data.next);\n    setPrevUrl(data.previous);\n    setLoading(false);\n  };\n\n  //obsluguje wyszukiwanie za pomoca search option wg gender\n  const handleSearch = async (gender) => {\n    setSearching(true);\n    setLoading(true);\n    setGender(gender);\n    const pokemonGenderArray = [];\n    let data = await getAllPokemon(\n      `https://pokeapi.co/api/v2/gender/${gender}/`\n    );\n    // 1. wyjecie z json gender nazwy pokemonow i przelozenie do tablicy pokemonGenderArray\n    data.pokemon_species_details.map((pokemon) => {\n      let pokemonName = pokemon.pokemon_species.name;\n      pokemonGenderArray.push(pokemonName);\n      return pokemonGenderArray;\n    });\n    setTotalPokemons(pokemonGenderArray.length);\n\n    //2. pociac tablice na czesci po 20 szt funkcja chunk\n    let chunked_arr = chunk(pokemonGenderArray, pokemonPerPage);\n    // 3. dopasowac nr kliknietej strony do odpowiedniej tablicy - i tu jest problem - nie chce sie dopasowac setCurrenPage!\n\n    console.log(`currentPage: ${currentPage}`);\n    //UWAGA tutaj jest problem, currentPage nie chce sie uaktualnic currentPage mimo ze kliknieta paginacja - jak to zrobic?\n    let currentPokemonArr = chunked_arr[currentPage - 1];\n    // 1a. stworzyc tablice z linkami do funkcji wywolujacej\n    currentPokemonArr = currentPokemonArr.map(\n      (pokemon) => `https://pokeapi.co/api/v2/pokemon/${pokemon}`\n    );\n\n    //2a. wywolac w funkcji\n\n    await loadingSearchedPokemon(currentPokemonArr);\n    setLoading(false);\n  };\n\n  // zdublowana funckja ladujaca pokemony na strone, warto by to ujednolicic\n  const loadingSearchedPokemon = async (data) => {\n    //niestety mnoze funkcje :(\n    let _pokemonData = await Promise.all(\n      data.map(async (pokemon) => {\n        let pokemonRecord = await getSinglePokemon(pokemon);\n        return pokemonRecord;\n      })\n    );\n    setPokemonData(_pokemonData);\n  };\n\n  // funkcja ladujaca pojedyncze pokemony na strone główną\n  const loadingSinglePokemon = async (data) => {\n    // console.log(data);\n    // promise to all - zwroci promisa jak wszystkie z tych zapytan zostana zwrocone. czyli jak przeiterujemy do konca i wrzucamy to wsyztsko do zmiennej _pokemonData\n    let _pokemonData = await Promise.all(\n      data.map(async (pokemon) => {\n        // kazdy obiekt ma dwie wartosci\n        let pokemonRecord = await getSinglePokemon(pokemon.url);\n        // console.log(pokemonRecord);\n        //zwracamy wynik i przekazujemy do state\n        return pokemonRecord;\n      })\n    );\n    //zmieniamy stan\n    setPokemonData(_pokemonData);\n  };\n\n  //change page in pagination, przekazanyz klikniecia pageNumber w AdvancedPagination to jest zmienna number\n  const paginate = (pageNumber) => {\n    console.log(`pageNumber: ${pageNumber}`);\n    handleSearch(gender);\n    setCurrentPage(pageNumber);\n  };\n\n  // unkcja krojaca tablice\n  function chunk(array, size) {\n    const chunked_arr = [];\n    let index = 0;\n    while (index < array.length) {\n      chunked_arr.push(array.slice(index, size + index));\n      index += size;\n    }\n    return chunked_arr;\n  }\n\n  return (\n    <>\n      <Navbar />\n      <SearchGenderForm handleSearch={handleSearch} />\n      {searching ? (\n        <AdvancedPagination\n          pokemonPerPage={pokemonPerPage}\n          totalPokemons={totalPokemons}\n          paginate={paginate}\n        />\n      ) : (\n        <SimplePagination next={next} prev={prev} />\n      )}\n      <PokemonContent pokemonData={pokemonData} loading={loading} />\n      <SimplePagination next={next} prev={prev} />\n    </>\n  );\n}\n\nexport default App;\n\n// inspiracja:\n// https://github.com/rivera1294/pokemon/tree/master/src\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}